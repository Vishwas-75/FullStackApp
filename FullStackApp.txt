FullStackApp


Serverside

Step 1:-Install the 1)package.json,2)Express ,3)graphql,4)Express-graphql
  cmd:npm init.
  cmd:npm install express.
  cmd:npm install graphql.
  cmd:npm install express-graphql.
    cmd:npm install nodemon -g.(why nodemon ?)
  
  



  What Is RootQuary?
  In root quary we have to write a quary in such way that we have to access all the
  other quary.  

  Why we want wright RootQuary?
  It is writen to access all other quary
   
  What is the adantages of graphQl?
  #Single end point.
  #Avoid multiple calls.




  structure 

  const Roottype= new GraphQLQuary({
  name:"RootQuaryType",
  fields:{
    book:{
      type:BookType,
      args:{id:{type:GraphQLQuary}},
      
      resolve(parent,args)
    }
  }
}) 
args: From parent if we want access the book we need to unique id or unique attribute access it 
so we need to pass it ass args .

resolve:It is a function used to fetch the data. 

why we want define fields as a function?
Because code is excuted from top to buttom ,when we bring relation between two quary 
we need to specify the type of other quary, so if we dont declare the fields as a function it
will be executed directly, during execution it will find type and throw an error saying
ex:"BookType is not defined" or "AuthorType is not defined"; 


MongoDb
Collection.init(); 

Appolo Client:

What is Appolo Client?
Apollo Client is a comprehensive state management library for JavaScript that enables you to manage 
both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while 
automatically updating your UI.

The quary that you are writed in the http//localhost/4000 , we need to write thet quary in our client side send to 
the backend , So to send that quary to backend we need  Appolo client

Why Appolo Client?
>Declarative data fetching.
With Apollo's declarative approach to data fetching, all of the logic for retrieving your data, tracking 
loading and error states, and updating your UI is encapsulated by the useQuery Hook.
ex:
'''
    function Feed() {
  const { loading, error, data } = useQuery(GET_DOGS);
  if (error) return <Error />;
  if (loading || !data) return <Fetching />;

  return <DogList dogs={data.dogs} />;
  } 
'''
>
Same Origin policy
------------------
The same-origin policy is a critical security mechanism that restricts how a document or script loaded from 
one origin can interact with a resource from another origin. It helps isolate potentially malicious documents, 
reducing possible attack vectors.

How to indentify Same origin?
Two URLs have the same origin if the protocol, port (if specified), and host are the same for both.

Cross-Origin Resource Sharing (Cors):
-------------------------------------

What is Cors?
Cross-Origin Resource Sharing (CORS) is a protocol that enables scripts running on a browser client to interact
with resources from a different origin. 

If we made any request to another origin (means differnt server) Same Origin Policy will restricts the that request
in order over come that we will use cors so this will allow to make request and get result.